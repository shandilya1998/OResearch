Model:
TITLE Integrated Multi-product Production Scheduling and Vehicle-routing Problem using Heterogeneous Fleet with Multiple Trips and Time Windows;

sets:
!primitive;
customer: loading_time, unloading_time, early_delivery, late_delivery;
product_type: process_time;
vehicle: veh_capacity, veh_used, veh_cost;
trip_index;
batch_number: active_batch, prod_start, prod_end;


!derived(index);
customer_product (customer, product_type): demand;
productseq (product_type, product_type): setup_time, product_seq;
customerseq (customer, customer): travel_time;
trip (vehicle, trip_index): delivery_start;
customer_trip (customer, vehicle, trip_index): cust_trip, arrival_time, time_early, time_late;
customer_batch (customer, batch_number): batching;
batch_batch (batch_number, batch_number): batch_seq;
batchveh (batch_number, vehicle, trip_index): batch_trip;
tripseq (customer, customer, vehicle, trip_index): routing;
productbatch (product_type, batch_number);
cust_batch_veh_trip (customer, batch_number, vehicle, trip_index);
prodcap (batch_number, vehicle);
cust_cust_batch_trip(customer, customer, batch_number, vehicle, trip_index);
endsets

data:
!set members;
customer = 1..7;
vehicle = 1..2;
trip_index = 1..2;
product_type = 1..3;
batch_number = 1..7;

!Import from excel - attribute values;
demand = @ole('Trial 1 - 5 customers.xlsx','demand');
loading_time = @ole('Trial 1 - 5 customers.xlsx','loading_time');
unloading_time = @ole('Trial 1 - 5 customers.xlsx','unloading_time');
early_delivery = @ole('Trial 1 - 5 customers.xlsx','early_delivery');
late_delivery = @ole('Trial 1 - 5 customers.xlsx','late_delivery');
process_time = @ole('Trial 1 - 5 customers.xlsx','process_time');
setup_time = @ole('Trial 1 - 5 customers.xlsx','setup_time');
travel_time = @ole('Trial 1 - 5 customers.xlsx','travel_time');
veh_capacity = @ole('Trial 1 - 5 customers.xlsx','veh_capacity');

veh_cost = @ole('Trial 1 - 5 customers.xlsx','veh_cost');
setup_cost = @ole('Trial 1 - 5 customers.xlsx','setup_cost');
process_cost = @ole('Trial 1 - 5 customers.xlsx','process_cost');
travel_cost = @ole('Trial 1 - 5 customers.xlsx','travel_cost');
penalty_early = @ole('Trial 1 - 5 customers.xlsx','penalty_early');
penalty_late = @ole('Trial 1 - 5 customers.xlsx','penalty_late');
large_number = @ole('Trial 1 - 5 customers.xlsx','large_number');

!Export to excel;
!Dependent Variables;
@ole('Trial 1 - 5 customers.xlsx','prod_start') = prod_start;
@ole('Trial 1 - 5 customers.xlsx','prod_end') = prod_end;
@ole('Trial 1 - 5 customers.xlsx','delivery_start') = delivery_start;
@ole('Trial 1 - 5 customers.xlsx','arrival_time') = arrival_time;
@ole('Trial 1 - 5 customers.xlsx','time_early') = time_early;
@ole('Trial 1 - 5 customers.xlsx','time_late') = time_late;
!Decision Variables;
@ole('Trial 1 - 5 customers.xlsx','product_seq') = product_seq;
@ole('Trial 1 - 5 customers.xlsx','batching') = batching;
@ole('Trial 1 - 5 customers.xlsx','active_batch') = active_batch;
@ole('Trial 1 - 5 customers.xlsx','batch_seq') = batch_seq;
@ole('Trial 1 - 5 customers.xlsx','batch_trip') = batch_trip;
@ole('Trial 1 - 5 customers.xlsx','cust_trip') = cust_trip;
@ole('Trial 1 - 5 customers.xlsx','routing') = routing;
@ole('Trial 1 - 5 customers.xlsx','veh_used') = veh_used;
enddata

!MILP MODEL;
!BINARY VARIABLES;
@for (productseq(p,q): @BIN(product_seq));
@for (customer_batch(j,f): @BIN(batching));
@for (batch_number(f): @BIN(active_batch));
@for (batch_batch(f,fprime): @BIN(batch_seq));
@for (batchveh(f,v,h): @BIN(batch_trip));
@for (customer_trip(j,v,h): @BIN(cust_trip));
@for (tripseq(i,j,v,h): @BIN(routing));
@for (vehicle(v): @BIN(veh_used));

!NON-NEGATIVITY CONSTRAINTS AND OTHERS;
@for (batch_number(f): prod_start >=0);
@for (batch_number(f): prod_end >=0);
@for (trip(v,h): delivery_start >=0);
@for (customer_trip(j,v,h): arrival_time >=0);
@for (customer_trip(j,v,h): time_early >=0);
@for (customer_trip(j,v,h): time_late >=0);
Lcustomer = @size(customer);
Lbatch_number = @size(batch_number);
Lvehicle = @size(vehicle);
Ltrip_index = @size(trip_index);
Lbatch_number <= Lcustomer;
Lvehicle <= Lcustomer;
Ltrip_index <= Lcustomer;

!OBJECTIVE FUNCTION;
MIN = process_cost * (@sum(customer_product(j,p): process_time(p)*demand(j,p))) +
	setup_cost * (@sum(productseq(p,q)| p#NE#q: setup_time(p,q)*product_seq(p,q))) +
	travel_cost * (@sum(tripseq(i,j,v,h)| i#NE#j: travel_time(i,j)*routing(i,j,v,h))) +
	@sum(vehicle(v): veh_cost(v)*veh_used(v)) +
	penalty_early * (@sum(customer_trip(j,v,h): time_early(j,v,h))) +
	penalty_late * (@sum(customer_trip(j,v,h): time_late(j,v,h)));

!DISTRIBUTION CONSTRAINTS;
!Each customer should be visited once and only once;
@for (customer(j)| j#NE#1 #AND# j#NE#7: @sum (trip(v,h): cust_trip(j,v,h)) =1);
@for (customer_trip(j,v,h)| j#NE#1 #AND# j#NE#7: cust_trip(1,v,h) >= cust_trip(j,v,h));
@for (customer_trip(j,v,h)| j#NE#1 #AND# j#NE#7: cust_trip(7,v,h) >= cust_trip(j,v,h));

!Vehicle capacity;
@for (trip(v,h): @sum(customer_product(j,p): demand(j,p)*cust_trip(j,v,h)) <= veh_capacity(v));

!Other routing assumptions;
@for (tripseq(i,j,v,h): routing(1,7,v,h) = 0);
@for (tripseq(i,j,v,h): routing(7,1,v,h) = 0);
!@for (tripseq(i,j,v,h)| i#EQ#j: routing(i,j,v,h) = 0);
!@for (tripseq(i,j,v,h)| i#EQ#j: routing(i,j,v,h) <= 1 - routing(j,i,v,h));

!Routing of customers;
	!Start at plant;
		@for (tripseq(i,j,v,h)| i#NE#j: routing(1,i,v,h) + routing(1,j,v,h) + cust_trip(i,v,h) + cust_trip(j,v,h) <= 3);
	!Middle;
		@for (customer_trip(j,v,h)| j#GE#2 #AND# j#NE#7: @sum(customer(i)| i#LE#6 #AND# i#NE#j: routing(i,j,v,h)) = cust_trip(j,v,h));
		@for (tripseq(i,j,v,h): cust_trip(i,v,h) >= routing(i,j,v,h) + cust_trip(j,v,h) - 1);
	
		@for (customer_trip(j,v,h)| j#NE#7: @sum(customer(i)| i#GE#2 #AND# i#NE#j: routing(j,i,v,h)) = cust_trip(j,v,h));
		@for (tripseq(i,j,v,h): cust_trip(j,v,h) >= routing(i,j,v,h) + cust_trip(i,v,h) - 1);
	!End at plant;
		@for (tripseq(i,j,v,h)| i#NE#j: routing(i,7,v,h) + routing(j,7,v,h) + cust_trip(i,v,h) + cust_trip(j,v,h) <= 3);

!Vehicle trip activation;
@for (trip(v,h)| h#LE#1: large_number*(@sum(customer(j)| j#NE#1 #AND# j#NE#7:cust_trip(j,v,h))) >= @sum(customer(j)| j#NE#1 #AND# j#NE#7:cust_trip(j,v,(h+1))));

!Vehicle v is used if a trip is assigned to it;
@for (trip(v,h): cust_trip(1,v,h) = veh_used(v));

!PRODUCTION CONSTRAINTS;
!Product sequencing;
@for (productseq(p,q)| p#NE#q: product_seq(p,q) <= 1 - product_seq(q,p));
@for (product_type(q): @sum (product_type(p)| p#NE#q: product_seq(p,q)) = 1);
@for (product_type(p): @sum(product_type(q)| p#NE#q: product_seq(p,q)) = 1);

!Total number of trips should be the same as total number of production batches;
@for (customer(j)| j#EQ#1: @sum(trip(v,h): cust_trip(j,v,h)) = @sum(batch_number(f)| f#NE#1 #AND# f#NE#7: active_batch(f)));
@for (batch_number(f)| f#LE#6: active_batch(f) >= active_batch(f+1));
@for (batch_number(f)| f#EQ#1: active_batch(1) =1);
!@for (batch_number(f)| f#EQ#27: active_batch(27) =1);

!Assignment of trip to production batch;
@for (batch_number(f)| f#NE#1 #AND# f#NE#7: @sum(trip(v,h): batch_trip(f,v,h)) = active_batch(f));
@for (customer_trip(j,v,h)| j#EQ#1: @sum(batch_number(f)| f#NE#1 #AND# f#NE#7: batch_trip(f,v,h)) = cust_trip(j,v,h));

!Each customer must be assigned to one production batch;
@for (customer(j)| j#NE#1 #AND# j#NE#7: @sum (batch_number(f)|f#NE#1 #AND# f#NE#7: batching(j,f)) =1);

!LINKING;
@for (cust_batch_veh_trip(j,f,v,h)| f#NE#1 #AND# f#NE#7 #AND# j#NE#1 #AND# j#NE#7: batching(j,f)+1 >= cust_trip(j,v,h)+batch_trip(f,v,h));
@for (cust_batch_veh_trip(j,f,v,h)| f#NE#1 #AND# f#NE#7 #AND# j#NE#1 #AND# j#NE#7: batch_trip(f,v,h) + 1 >= batching(j,f) + cust_trip(j,v,h));

!Batch production sequence;
	@for (batch_batch(f,fprime): batch_seq(1,7) = 0);
	@for (batch_batch(f,fprime): batch_seq(7,1) = 0);
	@for (batch_batch(f,fprime)| f#NE#fprime: batch_seq(f,fprime) <= 1 - batch_seq(fprime,f));

	@for (batch_number(fprime)| fprime#NE#1: @sum(batch_number(f)| f#GE#1 #AND# f#NE#7 #AND# f#NE#fprime: batch_seq(f,fprime)) = active_batch(fprime));
	!@for (batch_number(fprime)| fprime#NE#7: @sum(batch_number(f)| f#NE#1 #AND# f#NE#fprime: batch_seq(fprime,f)) = active_batch(fprime));

!TIME CONSTRAINTS;
!Production time;
@for (batch_number(f)| f#NE#1 #AND# f#NE#7: (@sum(productseq(p,q)| p#NE#q: product_seq(p,q)*setup_time(p,q)) +
	@sum(customer_product(j,p): process_time(p)*demand(j,p)*batching(j,f))) - large_number*(1-batch_seq(1,f)) <= prod_end(f));
@for (batch_batch(f,fprime)| f#NE#fprime #AND# f#NE#1 #AND# f#NE#7: prod_end(f) + (@sum(productseq(p,q)| p#NE#q: product_seq(p,q)*setup_time(p,q)) +
	@sum(customer_product(j,p): process_time(p)*demand(j,p)*batching(j,fprime))) - large_number*(1-batch_seq(f,fprime)) <= prod_end(fprime));

!Start time of delivery (first tour of each vehicle);
@for (batchveh(f,v,h): delivery_start(v,h) >= prod_end(f) + loading_time(1) - large_number*(1-batch_trip(f,v,h)));
!!@for (batchveh(f,v,h)| h#EQ#1: delivery_start(v,h) >= prod_end(f) + loading_time(1);

!Start time of delivery (not the first tour of a vehicle);
!!@for (trip(v,h)|h#LE#1: delivery_start(v,(h+1)) >= arrival_time(27,v,h) + unloading_time(27) + loading_time(1) - large_number*(1-cust_trip(27,v,h)));

!Start time of delivery (not the first tour and not the immediate trip);
!!@for (batchveh(f,v,h)|h#LE#1: delivery_start(v,(h+1)) >= prod_end(f) + loading_time(1) - large_number*(1-batch_trip(f,v,h+1)));

!Arrival time to the first customer;
@for (customer_trip(j,v,h)| h#EQ#1 : arrival_time(j,v,h) >= delivery_start(v,h) + loading_time(1) + travel_time(1,j) - large_number*(2-routing(1,j,v,h)-cust_trip(j,v,h)));

!Arrival time to the next customers;
@for (tripseq(i,j,v,h): arrival_time(j,v,h) >= arrival_time(i,v,h) + unloading_time(i) + travel_time(i,j) - large_number*(1-routing(i,j,v,h)));

!Time Window;
@for (customer_trip(j,v,h): time_early(j,v,h) >= early_delivery(j) - arrival_time(j,v,h));
@for (customer_trip(j,v,h): time_late(j,v,h) >= arrival_time(j,v,h) - late_delivery(j));






 